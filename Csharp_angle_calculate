using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms.DataVisualization.Charting;

namespace newapp1
{
    public partial class Form1 : Form
    {
        string jointnumber;
        string fname;
        string jointname;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //初期設定
            button5.Visible = false;
            button6.Visible = false;
            button7.Visible = false;
            button8.Visible = false;
            button9.Visible = false;
            button10.Visible = false;
            button11.Visible = false;
            button12.Visible = false;
            button13.Visible = false;
            button14.Visible = false;
            button15.Visible = false;
            button16.Visible = false;
            button17.Visible = false;
            button18.Visible = false;
            label2.Visible = false;
            label3.Visible = false;
            label4.Visible = false;
            label5.Visible = false;
            label6.Visible = false;
            label7.Visible = false;
            label8.Visible = false;
            label9.Visible = false;
            label10.Visible = false;
            pictureBox1.Visible = false;
            label12.Visible = false;
            chart1.Visible = false;
            comboBox1.Visible = false;

            label8.Text = "股関節屈曲";//default

            comboBox1.Items.Add("股関節屈曲");
            comboBox1.Items.Add("膝関節屈曲");
            comboBox1.Items.Add("足関節屈曲");
        }

        private void button1_Click(object sender, EventArgs e)
        {
            //画像フォルダの初期化
            pictureBox1.Image = null;
            if (System.IO.Directory.Exists(@"C:\openpose-build\x64\newmedia")) 
            {
                System.IO.Directory.Delete(@"C:\openpose-build\x64\newmedia", true);
            }

            if (System.IO.Directory.Exists(@"C:\openpose-build\x64\result_json"))
            {
                System.IO.Directory.Delete(@"C:\openpose-build\x64\result_json", true);
            }

            label7.ResetText(); //名前リセット
            label8.ResetText(); //関節名リセット

            label7.Text = textBox2.Text;    //名前をメインメニューで入力されたものにする

            page1to2();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            page1to5();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            MessageBox.Show("現在選択できません。",
            "エラー",MessageBoxButtons.OK,MessageBoxIcon.Error);
        }

        private void button4_Click(object sender, EventArgs e)
        {
            Application.Exit(); //アプリケーションの終了
        }

        private void button5_Click(object sender, EventArgs e)     //股関節屈曲
        {
            jointnumber = ("1");        //jointnumberはC++計算プログラムに渡す引数
            jointname = "膝関節屈曲";
            label8.Text = jointname + "　　[参考可動域] 125度";
            page2to3();
        }

        private void button6_Click(object sender, EventArgs e)     //膝関節屈曲
        {
            jointnumber = ("2");
            jointname = "膝関節屈曲";
            label8.Text = jointname + "　　[参考可動域] 130度";
            page2to3();
        }

        private void button7_Click(object sender, EventArgs e)     //足関節屈曲
        {
            jointnumber = ("3");
            jointname  = "足関節屈曲";
            label8.Text= jointname + "　　[参考可動域] 45度";
            page2to3();
        }

        private void button8_Click(object sender, EventArgs e)     //股関節伸展
        {
            MessageBox.Show("現在選択できません。",
            "エラー",MessageBoxButtons.OK,MessageBoxIcon.Error);
        }

        private void button9_Click(object sender, EventArgs e)     //膝関節伸展
        {
            MessageBox.Show("現在選択できません。",
            "エラー",MessageBoxButtons.OK,MessageBoxIcon.Error);
        }

        private void button10_Click(object sender, EventArgs e)     //足関節伸展
        {
            jointnumber = ("6");
            jointname = "足関節伸展";
            label8.Text = jointname + "　　[参考可動域] 20度";
            page2to3();
        }

        private void button11_Click(object sender, EventArgs e)
        {
            page2to1();
        }

        private void button12_Click(object sender, EventArgs e)     //写真撮影
        {
            MessageBox.Show("現在選択できません。",
            "エラー",MessageBoxButtons.OK,MessageBoxIcon.Error);

            //page3to4();
        }

        private void button13_Click(object sender, EventArgs e)     //画像選択
        {
            OpenFileDialog ofd = new OpenFileDialog();
            
            ofd.InitialDirectory = @"C:\Users\mukai\Pictures";
            ofd.Title = "画像を選択してください";
            ofd.RestoreDirectory = true;

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                fname = ofd.FileName;
                System.IO.DirectoryInfo di = System.IO.Directory.CreateDirectory(@"C:\openpose-build\x64\newmedia");
                File.Copy(fname, @"C:\openpose-build\x64\newmedia\001.jpg");
            }

            //OpenPoseのパラメータセット
            Process openpose = new Process();
            openpose.StartInfo.FileName = "Release\\OpenPoseDemo.exe";
            openpose.StartInfo.CreateNoWindow = true;
            openpose.StartInfo.ErrorDialog = true;
            openpose.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;

            //OpenPoseコマンドの指定
            openpose.StartInfo.Arguments = "--image_dir newmedia --write_images result_image --write_json result_json --display 0 --number_people_max 1";
           
            //OpenPoseを実行し、終了まで待機
            openpose.Start();       
            openpose.WaitForExit();

            //角度計算を行うＣ++プログラムのパラメータセット
            Process calculate = new Process();
            calculate.StartInfo.FileName = "20180906.exe";
            calculate.StartInfo.Arguments = jointnumber;   
            calculate.StartInfo.CreateNoWindow = true;
            calculate.StartInfo.ErrorDialog = true;
            calculate.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;

            //角度計算プログラムを実行し、終了まで待機
            calculate.Start();
            calculate.WaitForExit();

            //結果画像の表示
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            string[] files = Directory.GetFiles(@"C:\openpose-build\x64\result_picture", "*.bmp");
            string newest = string.Empty;
            System.DateTime updateTime = System.DateTime.MinValue;
            foreach (string file in files)
            {
                System.IO.FileInfo fi = new System.IO.FileInfo(file);
                if (fi.LastWriteTime > updateTime)
                {
                    updateTime = fi.LastWriteTime;
                    newest = file;
                }
            }
            pictureBox1.Image = Image.FromFile(newest);

            //角度の表示
            label5.Text = calculate.ExitCode.ToString() + "度";

            //名前が入力されている場合のみ、値をファイルに保存
            if(textBox2.Text != "")
            {
                System.IO.StreamWriter sw = new System.IO.StreamWriter(@"C:\Users\mukai\Desktop\result\" + textBox2.Text + " "+ jointname + ".txt", true, System.Text.Encoding.GetEncoding("shift_jis"));
                sw.WriteLine(calculate.ExitCode.ToString());
                sw.Close();
            }
            page3to4();
        }

        private void button14_Click(object sender, EventArgs e)
        {
            page3to2();
        }

        private void button15_Click(object sender, EventArgs e)
        {
            chart1.ChartAreas.Clear();  //描画領域

            chart1.Series.Clear();      //データ・色・種類等
            chart1.Legends.Clear();     //凡例

            string chart_area1 = "Area1";
            chart1.ChartAreas.Add(new ChartArea(chart_area1));

            string legend1 = "Graph1";
            chart1.Series.Add(legend1);

            chart1.Series[legend1].ChartType = SeriesChartType.Column;
            chart1.Series[legend1].Color = Color.SlateGray;
            chart1.Series[legend1].IsValueShownAsLabel = true;
            //chart1.ChartAreas[0].AxisX.Maximum = 20;
            chart1.ChartAreas[0].AxisX.Minimum = 0;
            chart1.ChartAreas[0].AxisX.Interval = 1;
            chart1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;

            int ref_deg = 0;

            if (jointname == "股関節屈曲")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 140;
                chart1.ChartAreas[0].AxisY.Minimum = 50;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 125;
            }
            else if (jointname == "膝関節屈曲")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 150;
                chart1.ChartAreas[0].AxisY.Minimum = 60;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 130;
            }
            else if (jointname == "足関節屈曲")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 60;
                chart1.ChartAreas[0].AxisY.Minimum = 0;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 45;
            }
            else if (jointname == "足関節伸展")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 60;
                chart1.ChartAreas[0].AxisY.Minimum = 0;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 20;
            }

            chart1.ChartAreas[0].AxisY.MajorGrid.LineColor = Color.Gray;
            chart1.ChartAreas[0].AxisY.MajorGrid.LineDashStyle = ChartDashStyle.Dot;

            StreamReader sr = new System.IO.StreamReader(@"C:\Users\mukai\Desktop\result\" + textBox2.Text + " " + jointname + ".txt");

            string line = "";
            List<string> list = new List<string>();
            int length = 0;

            // test.txtを1行ずつ読み込んでいき、末端(何もない行)までwhile文で繰り返す
            while ((line = sr.ReadLine()) != null)
            {
                list.Add(line);
                length++;
            }

            chart1.ChartAreas[0].AxisX.Maximum = length + 1;
            for (int i = 0; i < length; i++)
            {
                chart1.Series[0].Points.AddY(list[i]);
            }

            //分布図 
            Series series_spraying = new Series("basic");
            {
                series_spraying.ChartType = SeriesChartType.Line;//グラフのスタイル
                series_spraying.Color = Color.OrangeRed;
                series_spraying.BorderWidth = 3;
                series_spraying.BorderDashStyle = ChartDashStyle.Dash;

                for (int j = -1; j < length; j++)
                {
                    series_spraying.Points.AddY(ref_deg);
                }

            }
            chart1.Series.Add(series_spraying);
            sr.Close();
            page4to5();
        }

        //続けて測定を行う場合の処理
        private void button16_Click(object sender, EventArgs e)
        {
            if (System.IO.Directory.Exists(@"C:\openpose-build\x64\newmedia"))
            {
                System.IO.Directory.Delete(@"C:\openpose-build\x64\newmedia", true);
            }

            if (System.IO.Directory.Exists(@"C:\openpose-build\x64\result_json"))
            {
                System.IO.Directory.Delete(@"C:\openpose-build\x64\result_json", true);
            }
            page4to2();

            pictureBox1.Image = null;
            label5.ResetText();
        }

        //メインに戻るボタンを押した場合の処理
        private void button17_Click(object sender, EventArgs e)
        {
            page4to1();
        }

        //ページ1からページ2に表示変更
        private void page1to2()
        {
            button1.Visible = false;
            button2.Visible = false;
            button3.Visible = false;
            button4.Visible = false;
            button5.Visible = true;
            button6.Visible = true;
            button7.Visible = true;
            button8.Visible = true;
            button9.Visible = true;
            button10.Visible = true;
            button11.Visible = true;
            label1.Visible = false;
            label2.Visible = true;

            textBox2.Visible = false;
            label11.Visible = false;
            button19.Visible = false;
        }

        //ページ2からページ1に表示変更
        private void page2to1()
        {
            button5.Visible = false;
            button6.Visible = false;
            button7.Visible = false;
            button8.Visible = false;
            button9.Visible = false;
            button10.Visible = false;
            button11.Visible = false;
            button1.Visible = true;
            button2.Visible = true;
            button3.Visible = true;
            button4.Visible = true;
            label2.Visible = false;
            label1.Visible = true;

            textBox2.Visible = true;
            label11.Visible = true;
            button19.Visible = true;
        }

        //ページ2からページ3に表示変更
        private void page2to3()
        {
            button5.Visible = false;
            button6.Visible = false;
            button7.Visible = false;
            button8.Visible = false;
            button9.Visible = false;
            button10.Visible = false;
            button11.Visible = false;
            button12.Visible = true;
            button13.Visible = true;
            button14.Visible = true;
            label2.Visible = false;
            label3.Visible = true;
        }

        //ページ3からページ4に表示変更
        private void page3to4()
        {
            button12.Visible = false;
            button13.Visible = false;
            button14.Visible = false;
            button15.Visible = true;
            button16.Visible = true;
            button17.Visible = true;
            label3.Visible = false;
            label4.Visible = true;
            label5.Visible = true;
            label7.Visible = true;
            label8.Visible = true;
            label9.Visible = true;
            label10.Visible = true;
            pictureBox1.Visible = true;
            label12.Visible = true;
        }

        //ページ3からページ2に表示変更
        private void page3to2()
        {
            button12.Visible = false;
            button13.Visible = false;
            button14.Visible = false;
            button5.Visible = true;
            button6.Visible = true;
            button7.Visible = true;
            button8.Visible = true;
            button9.Visible = true;
            button10.Visible = true;
            button11.Visible = true;
            label3.Visible = false;
            label2.Visible = true;
        }

        //ページ4からページ1に表示変更
        private void page4to1()
        {
            button15.Visible = false;
            button16.Visible = false;
            button17.Visible = false;
            label4.Visible = false;
            label5.Visible = false;
            label7.Visible = false;
            label8.Visible = false;
            label9.Visible = false;
            label10.Visible = false;
            pictureBox1.Visible = false;
            label12.Visible = false;

            button1.Visible = true;
            button2.Visible = true;
            button3.Visible = true;
            button4.Visible = true;
            label1.Visible = true;

            textBox2.Visible = true;
            label11.Visible = true;
            button19.Visible = true;

        }

        //ページ4からページ2に表示変更
        private void page4to2()
        {
            button15.Visible = false;
            button16.Visible = false;
            button17.Visible = false;
            label4.Visible = false;
            label5.Visible = false;
            label7.Visible = false;
            label8.Visible = false;
            label9.Visible = false;
            label10.Visible = false;
            pictureBox1.Visible = false;
            label12.Visible = false;

            button5.Visible = true;
            button6.Visible = true;
            button7.Visible = true;
            button8.Visible = true;
            button9.Visible = true;
            button10.Visible = true;
            button11.Visible = true;
            label2.Visible = true;

        }

        //ページ4からページ5に表示変更
        private void page4to5()
        {
            button15.Visible = false;
            button16.Visible = false;
            button17.Visible = false;
            label4.Visible = false;
            label5.Visible = false;
            label7.Visible = false;
            label8.Visible = false;
            label9.Visible = false;
            label10.Visible = false;
            pictureBox1.Visible = false;
            label12.Visible = false;
            chart1.Visible = true;
            button18.Visible = true;
            label6.Visible = true;
            comboBox1.Visible = true;
        }

        //ページ5からページ4に表示変更
        private void page5to4()
        {
            button15.Visible = true;
            button16.Visible = true;
            button17.Visible = true;
            label4.Visible = true;
            label5.Visible = true;
            label7.Visible = true;
            label8.Visible = true;
            label9.Visible = true;
            label10.Visible = true;
            pictureBox1.Visible = true;
            label12.Visible = true;
            
            chart1.Visible = false;
            button18.Visible = false;
            label6.Visible = false;
            comboBox1.Visible = false;
        }

        //ページ5からページ1に表示変更
        private void page5to1()
        {
            button1.Visible = true;
            button2.Visible = true;
            button3.Visible = true;
            button4.Visible = true;
            label1.Visible = true;
            chart1.Visible = false;
            button18.Visible = false;
            label6.Visible = false;

            textBox2.Visible = true;
            label11.Visible = true;
            button19.Visible = true;
            comboBox1.Visible = false;
        }

        //ページ1からページ5に表示変更
        private void page1to5()
        {
            button1.Visible = false;
            button2.Visible = false;
            button3.Visible = false;
            button4.Visible = false;
            label1.Visible = false;
            chart1.Visible = true;
            button18.Visible = true;
            label6.Visible = true;

            textBox2.Visible = false;
            label11.Visible = false;
            button19.Visible = false;
            comboBox1.Visible = true;
        }

        private void chart1_Click(object sender, EventArgs e)
        {

        }

        private void button18_Click_1(object sender, EventArgs e)
        {
            page5to1();
        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void button19_Click(object sender, EventArgs e)
        {
            textBox2.ResetText();
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            chart1.ChartAreas.Clear();  //描画領域
            chart1.Series.Clear();      //データ・色・種類等
            chart1.Legends.Clear();     //凡例

            string chart_area1 = "Area1";
            chart1.ChartAreas.Add(new ChartArea(chart_area1));

            string legend1 = "Graph1";
            chart1.Series.Add(legend1);

            chart1.Series[legend1].ChartType = SeriesChartType.Column;
            chart1.Series[legend1].Color = Color.SlateGray;
            chart1.Series[legend1].IsValueShownAsLabel = true;
            chart1.ChartAreas[0].AxisX.Minimum = 0;
            chart1.ChartAreas[0].AxisX.Interval = 1;
            chart1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;

            int ref_deg = 0;

            if (comboBox1.Text == "股関節屈曲")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 140;
                chart1.ChartAreas[0].AxisY.Minimum = 50;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 125;
            }
            else if (comboBox1.Text == "膝関節屈曲")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 150;
                chart1.ChartAreas[0].AxisY.Minimum = 60;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 130;
            }
            else if (comboBox1.Text == "足関節屈曲")
            {
                chart1.ChartAreas[0].AxisY.Maximum = 60;
                chart1.ChartAreas[0].AxisY.Minimum = 0;
                chart1.ChartAreas[0].AxisY.Interval = 10;
                ref_deg = 45;
                
            }
            chart1.ChartAreas[0].AxisY.MajorGrid.LineColor = Color.Gray;
            chart1.ChartAreas[0].AxisY.MajorGrid.LineDashStyle = ChartDashStyle.Dot;

            StreamReader sr = new System.IO.StreamReader(@"C:\Users\mukai\Desktop\result\" + textBox2.Text + " " + comboBox1.Text + ".txt");

            string line = "";
            List<string> list = new List<string>();         //空のListを作成する
            int length = 0;

            // test.txtを1行ずつ読み込んでいき、末端(何もない行)までwhile文で繰り返す
            while ((line = sr.ReadLine()) != null)
            {
                list.Add(line);
                length++;
            }

            chart1.ChartAreas[0].AxisX.Maximum = length + 1;
            for (int i = 0; i < length; i++)
            {
                chart1.Series[0].Points.AddY(list[i]);
            }


            //分布図 
            Series series_spraying = new Series("basic");
            {
                series_spraying.ChartType = SeriesChartType.Line;//グラフのスタイル
                series_spraying.Color = Color.OrangeRed;
                series_spraying.BorderWidth = 3;
                series_spraying.BorderDashStyle = ChartDashStyle.Dash;

                for (int j = -1; j < length; j++)
                {
                    series_spraying.Points.AddY(ref_deg);
                }

            }
            chart1.Series.Add(series_spraying);
            sr.Close();
        }

        private void label9_Click(object sender, EventArgs e)
        {

        }
    }
}


